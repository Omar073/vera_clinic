// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'apiKeys.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    const isTesting = bool.fromEnvironment('TESTING');
    if (kIsWeb) {
      return isTesting ? _webTest : _webLive;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return isTesting ? _androidTest : _androidLive;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        return isTesting ? _windowsTest : _windowsLive;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // Live (production) Firebase options
  static const FirebaseOptions _webLive = FirebaseOptions(
    apiKey: webLiveApiKey,
    appId: webLiveAppId,
    messagingSenderId: '646096833745',
    projectId: 'vera-life-clinic',
    authDomain: 'vera-life-clinic.firebaseapp.com',
    storageBucket: 'vera-life-clinic.firebasestorage.app',
    measurementId: 'G-MMC6Z6LE1C',
  );

  static const FirebaseOptions _androidLive = FirebaseOptions(
    apiKey: androidLiveApiKey,
    appId: androidLiveAppId,
    messagingSenderId: '646096833745',
    projectId: 'vera-life-clinic',
    storageBucket: 'vera-life-clinic.firebasestorage.app',
  );

  static const FirebaseOptions _windowsLive = FirebaseOptions(
    apiKey: windowsLiveApiKey,
    appId: windowsLiveAppId,
    messagingSenderId: '646096833745',
    projectId: 'vera-life-clinic',
    authDomain: 'vera-life-clinic.firebaseapp.com',
    storageBucket: 'vera-life-clinic.firebasestorage.app',
    measurementId: 'G-5HF21BDL1Z',
  );

  // Test (staging) Firebase options
  static const FirebaseOptions _webTest = FirebaseOptions(
    apiKey: webTestApiKey,
    appId: webTestAppId,
    messagingSenderId: '742125492849',
    projectId: 'vera-life-clinic-test',
    authDomain: 'vera-life-clinic-test.firebaseapp.com',
    storageBucket: 'vera-life-clinic-test.firebasestorage.app',
  );

  static const FirebaseOptions _androidTest = FirebaseOptions(
    apiKey: androidTestApiKey,
    appId: androidTestAppId,
    messagingSenderId: '742125492849',
    projectId: 'vera-life-clinic-test',
    storageBucket: 'vera-life-clinic-test.firebasestorage.app',
  );

  static const FirebaseOptions _windowsTest = FirebaseOptions(
    apiKey: windowsTestApiKey,
    appId: windowsTestAppId,
    messagingSenderId: '742125492849',
    projectId: 'vera-life-clinic-test',
    authDomain: 'vera-life-clinic-test.firebaseapp.com',
    storageBucket: 'vera-life-clinic-test.firebasestorage.app',
  );
}
